import java.io.*;
import java.util.*;

class Book {
    private String title;
    private String author;
    private int year;

    public Book(String title, String author, int year) {
        this.title = title;
        this.author = author;
        this.year = year;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public int getYear() {
        return year;
    }

    @Override
    public String toString() {
        return title + " by " + author + " (" + year + ")";
    }
}

public class Library_Management_System {
    private static final List<Book> books = new ArrayList<>();
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        loadBooksFromFile();

        int choice;
        do {
            printMenu();
            choice = getUserChoice();

            switch (choice) {
                case 1 -> addBook();
                case 2 -> displayAllBooks();
                case 3 -> searchBookByTitle();
                case 4 -> removeBookByTitle();
                case 5 -> saveBooksToFile();
                default -> System.out.println("‚ùå Invalid option. Please try again.");
            }
        } while (choice != 5);
    }

    private static void printMenu() {
        System.out.println("\n===== üìö Library Management System üìö =====");
        System.out.println("1Ô∏è‚É£  Add Book");
        System.out.println("2Ô∏è‚É£  Show All Books");
        System.out.println("3Ô∏è‚É£  Search Book by Title");
        System.out.println("4Ô∏è‚É£  Remove Book by Title");
        System.out.println("5Ô∏è‚É£  Save & Exit");
        System.out.print("üëâ Enter your choice: ");
    }

    private static int getUserChoice() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            System.out.println("‚ö†Ô∏è  Invalid input! Please enter a number.");
            return -1; // Invalid choice
        }
    }

    private static void addBook() {
        System.out.print("üìñ Enter Book Title: ");
        String title = scanner.nextLine().trim();

        System.out.print("‚úçÔ∏è Enter Author Name: ");
        String author = scanner.nextLine().trim();

        System.out.print("üìÖ Enter Year of Publication: ");
        int year;
        try {
            year = Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            System.out.println("‚ö†Ô∏è  Invalid year! Book not added.");
            return;
        }

        books.add(new Book(title, author, year));
        System.out.println("‚úÖ Book added successfully!");
    }

    private static void displayAllBooks() {
        if (books.isEmpty()) {
            System.out.println("üì≠ No books available.");
        } else {
            System.out.println("\nüìö Current Books in Library:");
            books.forEach(book -> System.out.println("‚Ä¢ " + book));
        }
    }

    private static void searchBookByTitle() {
        System.out.print("üîç Enter Title to Search: ");
        String searchTitle = scanner.nextLine().trim();

        boolean found = false;
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(searchTitle)) {
                System.out.println("‚úÖ Found: " + book);
                found = true;
            }
        }

        if (!found) {
            System.out.println("‚ùå Book not found.");
        }
    }

    private static void removeBookByTitle() {
        System.out.print("üóëÔ∏è Enter Title to Remove: ");
        String titleToRemove = scanner.nextLine().trim();

        boolean removed = books.removeIf(book -> book.getTitle().equalsIgnoreCase(titleToRemove));

        if (removed) {
            System.out.println("‚úÖ Book removed successfully!");
        } else {
            System.out.println("‚ùå Book not found.");
        }
    }

    private static void saveBooksToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("books.txt"))) {
            for (Book book : books) {
                writer.write(book.getTitle() + "," + book.getAuthor() + "," + book.getYear());
                writer.newLine();
            }
            System.out.println("üíæ Books saved successfully. Exiting...");
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è  Error saving books.");
        }
    }

    private static void loadBooksFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader("books.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    String title = parts[0].trim();
                    String author = parts[1].trim();
                    int year = Integer.parseInt(parts[2].trim());
                    books.add(new Book(title, author, year));
                }
            }
        } catch (IOException e) {
            // File might not exist yet; no need to print error
        }
    }
}
